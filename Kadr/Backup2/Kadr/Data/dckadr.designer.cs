#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.1433
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kadr.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Kadr")]
	public partial class dckadrDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkType(WorkType instance);
    partial void UpdateWorkType(WorkType instance);
    partial void DeleteWorkType(WorkType instance);
    partial void InsertBonusSuperType(BonusSuperType instance);
    partial void UpdateBonusSuperType(BonusSuperType instance);
    partial void DeleteBonusSuperType(BonusSuperType instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertDepartmentType(DepartmentType instance);
    partial void UpdateDepartmentType(DepartmentType instance);
    partial void DeleteDepartmentType(DepartmentType instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeRank(EmployeeRank instance);
    partial void UpdateEmployeeRank(EmployeeRank instance);
    partial void DeleteEmployeeRank(EmployeeRank instance);
    partial void InsertFactStaff(FactStaff instance);
    partial void UpdateFactStaff(FactStaff instance);
    partial void DeleteFactStaff(FactStaff instance);
    partial void InsertGlobalPrikaz(GlobalPrikaz instance);
    partial void UpdateGlobalPrikaz(GlobalPrikaz instance);
    partial void DeleteGlobalPrikaz(GlobalPrikaz instance);
    partial void InsertGrazd(Grazd instance);
    partial void UpdateGrazd(Grazd instance);
    partial void DeleteGrazd(Grazd instance);
    partial void InsertPKGroup(PKGroup instance);
    partial void UpdatePKGroup(PKGroup instance);
    partial void DeletePKGroup(PKGroup instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertRank(Rank instance);
    partial void UpdateRank(Rank instance);
    partial void DeleteRank(Rank instance);
    partial void InsertSemPol(SemPol instance);
    partial void UpdateSemPol(SemPol instance);
    partial void DeleteSemPol(SemPol instance);
    partial void InsertBonus(Bonus instance);
    partial void UpdateBonus(Bonus instance);
    partial void DeleteBonus(Bonus instance);
    partial void InsertPKCategory(PKCategory instance);
    partial void UpdatePKCategory(PKCategory instance);
    partial void DeletePKCategory(PKCategory instance);
    partial void InsertPrikazType(PrikazType instance);
    partial void UpdatePrikazType(PrikazType instance);
    partial void DeletePrikazType(PrikazType instance);
    partial void InsertPrikaz(Prikaz instance);
    partial void UpdatePrikaz(Prikaz instance);
    partial void DeletePrikaz(Prikaz instance);
    partial void InsertPrikazSuperType(PrikazSuperType instance);
    partial void UpdatePrikazSuperType(PrikazSuperType instance);
    partial void DeletePrikazSuperType(PrikazSuperType instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertBonusType(BonusType instance);
    partial void UpdateBonusType(BonusType instance);
    partial void DeleteBonusType(BonusType instance);
    partial void InsertFinancingSource(FinancingSource instance);
    partial void UpdateFinancingSource(FinancingSource instance);
    partial void DeleteFinancingSource(FinancingSource instance);
    partial void InsertPlanStaff(PlanStaff instance);
    partial void UpdatePlanStaff(PlanStaff instance);
    partial void DeletePlanStaff(PlanStaff instance);
    partial void InsertPKCategorySalary(PKCategorySalary instance);
    partial void UpdatePKCategorySalary(PKCategorySalary instance);
    partial void DeletePKCategorySalary(PKCategorySalary instance);
    partial void InsertPlanStaffSalary(PlanStaffSalary instance);
    partial void UpdatePlanStaffSalary(PlanStaffSalary instance);
    partial void DeletePlanStaffSalary(PlanStaffSalary instance);
    #endregion
		
		public dckadrDataContext() : 
				base(global::Kadr.Properties.Settings.Default.KadrConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public dckadrDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dckadrDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dckadrDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dckadrDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkType> WorkTypes
		{
			get
			{
				return this.GetTable<WorkType>();
			}
		}
		
		public System.Data.Linq.Table<BonusSuperType> BonusSuperTypes
		{
			get
			{
				return this.GetTable<BonusSuperType>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentType> DepartmentTypes
		{
			get
			{
				return this.GetTable<DepartmentType>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeRank> EmployeeRanks
		{
			get
			{
				return this.GetTable<EmployeeRank>();
			}
		}
		
		public System.Data.Linq.Table<FactStaff> FactStaffs
		{
			get
			{
				return this.GetTable<FactStaff>();
			}
		}
		
		public System.Data.Linq.Table<GlobalPrikaz> GlobalPrikazs
		{
			get
			{
				return this.GetTable<GlobalPrikaz>();
			}
		}
		
		public System.Data.Linq.Table<Grazd> Grazds
		{
			get
			{
				return this.GetTable<Grazd>();
			}
		}
		
		public System.Data.Linq.Table<PKGroup> PKGroups
		{
			get
			{
				return this.GetTable<PKGroup>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Rank> Ranks
		{
			get
			{
				return this.GetTable<Rank>();
			}
		}
		
		public System.Data.Linq.Table<SemPol> SemPols
		{
			get
			{
				return this.GetTable<SemPol>();
			}
		}
		
		public System.Data.Linq.Table<Bonus> Bonus
		{
			get
			{
				return this.GetTable<Bonus>();
			}
		}
		
		public System.Data.Linq.Table<PKCategory> PKCategories
		{
			get
			{
				return this.GetTable<PKCategory>();
			}
		}
		
		public System.Data.Linq.Table<PrikazType> PrikazTypes
		{
			get
			{
				return this.GetTable<PrikazType>();
			}
		}
		
		public System.Data.Linq.Table<Prikaz> Prikazs
		{
			get
			{
				return this.GetTable<Prikaz>();
			}
		}
		
		public System.Data.Linq.Table<PrikazSuperType> PrikazSuperTypes
		{
			get
			{
				return this.GetTable<PrikazSuperType>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<BonusType> BonusTypes
		{
			get
			{
				return this.GetTable<BonusType>();
			}
		}
		
		public System.Data.Linq.Table<FinancingSource> FinancingSources
		{
			get
			{
				return this.GetTable<FinancingSource>();
			}
		}
		
		public System.Data.Linq.Table<PlanStaff> PlanStaffs
		{
			get
			{
				return this.GetTable<PlanStaff>();
			}
		}
		
		public System.Data.Linq.Table<PKCategorySalary> PKCategorySalaries
		{
			get
			{
				return this.GetTable<PKCategorySalary>();
			}
		}
		
		public System.Data.Linq.Table<PlanStaffSalary> PlanStaffSalaries
		{
			get
			{
				return this.GetTable<PlanStaffSalary>();
			}
		}
	}
	
	[Table(Name="dbo.WorkType")]
	public partial class WorkType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _TypeWorkName;
		
		private EntitySet<FactStaff> _FactStaffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnTypeWorkNameChanging(string value);
    partial void OnTypeWorkNameChanged();
    #endregion
		
		public WorkType()
		{
			this._FactStaffs = new EntitySet<FactStaff>(new Action<FactStaff>(this.attach_FactStaffs), new Action<FactStaff>(this.detach_FactStaffs));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_TypeWorkName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeWorkName
		{
			get
			{
				return this._TypeWorkName;
			}
			set
			{
				if ((this._TypeWorkName != value))
				{
					this.OnTypeWorkNameChanging(value);
					this.SendPropertyChanging();
					this._TypeWorkName = value;
					this.SendPropertyChanged("TypeWorkName");
					this.OnTypeWorkNameChanged();
				}
			}
		}
		
		[Association(Name="WorkType_FactStaff", Storage="_FactStaffs", OtherKey="idTypeWork")]
		public EntitySet<FactStaff> FactStaffs
		{
			get
			{
				return this._FactStaffs;
			}
			set
			{
				this._FactStaffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.WorkType = this;
		}
		
		private void detach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.WorkType = null;
		}
	}
	
	[Table(Name="dbo.BonusSuperType")]
	public partial class BonusSuperType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _BonusSuperTypeName;
		
		private EntitySet<BonusType> _BonusTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnBonusSuperTypeNameChanging(string value);
    partial void OnBonusSuperTypeNameChanged();
    #endregion
		
		public BonusSuperType()
		{
			this._BonusTypes = new EntitySet<BonusType>(new Action<BonusType>(this.attach_BonusTypes), new Action<BonusType>(this.detach_BonusTypes));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_BonusSuperTypeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string BonusSuperTypeName
		{
			get
			{
				return this._BonusSuperTypeName;
			}
			set
			{
				if ((this._BonusSuperTypeName != value))
				{
					this.OnBonusSuperTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BonusSuperTypeName = value;
					this.SendPropertyChanged("BonusSuperTypeName");
					this.OnBonusSuperTypeNameChanged();
				}
			}
		}
		
		[Association(Name="BonusSuperType_BonusType", Storage="_BonusTypes", OtherKey="idBonusSuperType")]
		public EntitySet<BonusType> BonusTypes
		{
			get
			{
				return this._BonusTypes;
			}
			set
			{
				this._BonusTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BonusTypes(BonusType entity)
		{
			this.SendPropertyChanging();
			entity.BonusSuperType = this;
		}
		
		private void detach_BonusTypes(BonusType entity)
		{
			this.SendPropertyChanging();
			entity.BonusSuperType = null;
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _CategoryName;
		
		private string _CategorySmallName;
		
		private EntitySet<PlanStaff> _PlanStaffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategorySmallNameChanging(string value);
    partial void OnCategorySmallNameChanged();
    #endregion
		
		public Category()
		{
			this._PlanStaffs = new EntitySet<PlanStaff>(new Action<PlanStaff>(this.attach_PlanStaffs), new Action<PlanStaff>(this.detach_PlanStaffs));
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_CategorySmallName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategorySmallName
		{
			get
			{
				return this._CategorySmallName;
			}
			set
			{
				if ((this._CategorySmallName != value))
				{
					this.OnCategorySmallNameChanging(value);
					this.SendPropertyChanging();
					this._CategorySmallName = value;
					this.SendPropertyChanged("CategorySmallName");
					this.OnCategorySmallNameChanged();
				}
			}
		}
		
		[Association(Name="Category_PlanStaff", Storage="_PlanStaffs", OtherKey="idCategory")]
		public EntitySet<PlanStaff> PlanStaffs
		{
			get
			{
				return this._PlanStaffs;
			}
			set
			{
				this._PlanStaffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.DepartmentType")]
	public partial class DepartmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _DepartmentTypeName;
		
		private EntitySet<Department> _Departments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDepartmentTypeNameChanging(string value);
    partial void OnDepartmentTypeNameChanged();
    #endregion
		
		public DepartmentType()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DepartmentTypeName
		{
			get
			{
				return this._DepartmentTypeName;
			}
			set
			{
				if ((this._DepartmentTypeName != value))
				{
					this.OnDepartmentTypeNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentTypeName = value;
					this.SendPropertyChanged("DepartmentTypeName");
					this.OnDepartmentTypeNameChanged();
				}
			}
		}
		
		[Association(Name="DepartmentType_Department", Storage="_Departments", OtherKey="idDepartmentType")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentType = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentType = null;
		}
	}
	
	[Table(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _itab_n;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Otch;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _BirthPlace;
		
		private System.Nullable<bool> _SexBit;
		
		private System.Nullable<int> _idGrazd;
		
		private System.Nullable<int> _idSemPol;
		
		private int _SeverKoeff;
		
		private int _RayonKoeff;
		
		private EntitySet<EmployeeRank> _EmployeeRanks;
		
		private EntitySet<FactStaff> _FactStaffs;
		
		private EntityRef<Grazd> _Grazd;
		
		private EntityRef<SemPol> _SemPol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onitab_nChanging(System.Nullable<int> value);
    partial void Onitab_nChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnOtchChanging(string value);
    partial void OnOtchChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnBirthPlaceChanging(string value);
    partial void OnBirthPlaceChanged();
    partial void OnSexBitChanging(System.Nullable<bool> value);
    partial void OnSexBitChanged();
    partial void OnidGrazdChanging(System.Nullable<int> value);
    partial void OnidGrazdChanged();
    partial void OnidSemPolChanging(System.Nullable<int> value);
    partial void OnidSemPolChanged();
    partial void OnSeverKoeffChanging(int value);
    partial void OnSeverKoeffChanged();
    partial void OnRayonKoeffChanging(int value);
    partial void OnRayonKoeffChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeRanks = new EntitySet<EmployeeRank>(new Action<EmployeeRank>(this.attach_EmployeeRanks), new Action<EmployeeRank>(this.detach_EmployeeRanks));
			this._FactStaffs = new EntitySet<FactStaff>(new Action<FactStaff>(this.attach_FactStaffs), new Action<FactStaff>(this.detach_FactStaffs));
			this._Grazd = default(EntityRef<Grazd>);
			this._SemPol = default(EntityRef<SemPol>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_itab_n", DbType="Int")]
		public System.Nullable<int> itab_n
		{
			get
			{
				return this._itab_n;
			}
			set
			{
				if ((this._itab_n != value))
				{
					this.Onitab_nChanging(value);
					this.SendPropertyChanging();
					this._itab_n = value;
					this.SendPropertyChanged("itab_n");
					this.Onitab_nChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Otch", DbType="VarChar(50)")]
		public string Otch
		{
			get
			{
				return this._Otch;
			}
			set
			{
				if ((this._Otch != value))
				{
					this.OnOtchChanging(value);
					this.SendPropertyChanging();
					this._Otch = value;
					this.SendPropertyChanged("Otch");
					this.OnOtchChanged();
				}
			}
		}
		
		[Column(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[Column(Storage="_BirthPlace", DbType="VarChar(200)")]
		public string BirthPlace
		{
			get
			{
				return this._BirthPlace;
			}
			set
			{
				if ((this._BirthPlace != value))
				{
					this.OnBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthPlace = value;
					this.SendPropertyChanged("BirthPlace");
					this.OnBirthPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_SexBit", DbType="Bit")]
		public System.Nullable<bool> SexBit
		{
			get
			{
				return this._SexBit;
			}
			set
			{
				if ((this._SexBit != value))
				{
					this.OnSexBitChanging(value);
					this.SendPropertyChanging();
					this._SexBit = value;
					this.SendPropertyChanged("SexBit");
					this.OnSexBitChanged();
				}
			}
		}
		
		[Column(Storage="_idGrazd", DbType="Int")]
		public System.Nullable<int> idGrazd
		{
			get
			{
				return this._idGrazd;
			}
			set
			{
				if ((this._idGrazd != value))
				{
					if (this._Grazd.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGrazdChanging(value);
					this.SendPropertyChanging();
					this._idGrazd = value;
					this.SendPropertyChanged("idGrazd");
					this.OnidGrazdChanged();
				}
			}
		}
		
		[Column(Storage="_idSemPol", DbType="Int")]
		public System.Nullable<int> idSemPol
		{
			get
			{
				return this._idSemPol;
			}
			set
			{
				if ((this._idSemPol != value))
				{
					if (this._SemPol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSemPolChanging(value);
					this.SendPropertyChanging();
					this._idSemPol = value;
					this.SendPropertyChanged("idSemPol");
					this.OnidSemPolChanged();
				}
			}
		}
		
		[Column(Storage="_SeverKoeff", DbType="Int NOT NULL")]
		public int SeverKoeff
		{
			get
			{
				return this._SeverKoeff;
			}
			set
			{
				if ((this._SeverKoeff != value))
				{
					this.OnSeverKoeffChanging(value);
					this.SendPropertyChanging();
					this._SeverKoeff = value;
					this.SendPropertyChanged("SeverKoeff");
					this.OnSeverKoeffChanged();
				}
			}
		}
		
		[Column(Storage="_RayonKoeff", DbType="Int NOT NULL")]
		public int RayonKoeff
		{
			get
			{
				return this._RayonKoeff;
			}
			set
			{
				if ((this._RayonKoeff != value))
				{
					this.OnRayonKoeffChanging(value);
					this.SendPropertyChanging();
					this._RayonKoeff = value;
					this.SendPropertyChanged("RayonKoeff");
					this.OnRayonKoeffChanged();
				}
			}
		}
		
		[Association(Name="Employee_EmployeeRank", Storage="_EmployeeRanks", OtherKey="idEmployee")]
		public EntitySet<EmployeeRank> EmployeeRanks
		{
			get
			{
				return this._EmployeeRanks;
			}
			set
			{
				this._EmployeeRanks.Assign(value);
			}
		}
		
		[Association(Name="Employee_FactStaff", Storage="_FactStaffs", OtherKey="idEmployee")]
		public EntitySet<FactStaff> FactStaffs
		{
			get
			{
				return this._FactStaffs;
			}
			set
			{
				this._FactStaffs.Assign(value);
			}
		}
		
		[Association(Name="Grazd_Employee", Storage="_Grazd", ThisKey="idGrazd", IsForeignKey=true)]
		public Grazd Grazd
		{
			get
			{
				return this._Grazd.Entity;
			}
			set
			{
				Grazd previousValue = this._Grazd.Entity;
				if (((previousValue != value) 
							|| (this._Grazd.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grazd.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Grazd.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._idGrazd = value.id;
					}
					else
					{
						this._idGrazd = default(Nullable<int>);
					}
					this.SendPropertyChanged("Grazd");
				}
			}
		}
		
		[Association(Name="SemPol_Employee", Storage="_SemPol", ThisKey="idSemPol", IsForeignKey=true)]
		public SemPol SemPol
		{
			get
			{
				return this._SemPol.Entity;
			}
			set
			{
				SemPol previousValue = this._SemPol.Entity;
				if (((previousValue != value) 
							|| (this._SemPol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SemPol.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._SemPol.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._idSemPol = value.id;
					}
					else
					{
						this._idSemPol = default(Nullable<int>);
					}
					this.SendPropertyChanged("SemPol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeRanks(EmployeeRank entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeRanks(EmployeeRank entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[Table(Name="dbo.EmployeeRank")]
	public partial class EmployeeRank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idEmployee;
		
		private System.Nullable<int> _idRank;
		
		private string _dokSer;
		
		private string _dokNum;
		
		private System.Nullable<System.DateTime> _rankDate;
		
		private string _rankWhere;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Rank> _Rank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidEmployeeChanging(int value);
    partial void OnidEmployeeChanged();
    partial void OnidRankChanging(System.Nullable<int> value);
    partial void OnidRankChanged();
    partial void OndokSerChanging(string value);
    partial void OndokSerChanged();
    partial void OndokNumChanging(string value);
    partial void OndokNumChanged();
    partial void OnrankDateChanging(System.Nullable<System.DateTime> value);
    partial void OnrankDateChanged();
    partial void OnrankWhereChanging(string value);
    partial void OnrankWhereChanged();
    #endregion
		
		public EmployeeRank()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Rank = default(EntityRef<Rank>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idEmployee", DbType="Int NOT NULL")]
		public int idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_idRank", DbType="Int")]
		public System.Nullable<int> idRank
		{
			get
			{
				return this._idRank;
			}
			set
			{
				if ((this._idRank != value))
				{
					if (this._Rank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRankChanging(value);
					this.SendPropertyChanging();
					this._idRank = value;
					this.SendPropertyChanged("idRank");
					this.OnidRankChanged();
				}
			}
		}
		
		[Column(Storage="_dokSer", DbType="VarChar(100)")]
		public string dokSer
		{
			get
			{
				return this._dokSer;
			}
			set
			{
				if ((this._dokSer != value))
				{
					this.OndokSerChanging(value);
					this.SendPropertyChanging();
					this._dokSer = value;
					this.SendPropertyChanged("dokSer");
					this.OndokSerChanged();
				}
			}
		}
		
		[Column(Storage="_dokNum", DbType="VarChar(100)")]
		public string dokNum
		{
			get
			{
				return this._dokNum;
			}
			set
			{
				if ((this._dokNum != value))
				{
					this.OndokNumChanging(value);
					this.SendPropertyChanging();
					this._dokNum = value;
					this.SendPropertyChanged("dokNum");
					this.OndokNumChanged();
				}
			}
		}
		
		[Column(Storage="_rankDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> rankDate
		{
			get
			{
				return this._rankDate;
			}
			set
			{
				if ((this._rankDate != value))
				{
					this.OnrankDateChanging(value);
					this.SendPropertyChanging();
					this._rankDate = value;
					this.SendPropertyChanged("rankDate");
					this.OnrankDateChanged();
				}
			}
		}
		
		[Column(Storage="_rankWhere", DbType="VarChar(200)")]
		public string rankWhere
		{
			get
			{
				return this._rankWhere;
			}
			set
			{
				if ((this._rankWhere != value))
				{
					this.OnrankWhereChanging(value);
					this.SendPropertyChanging();
					this._rankWhere = value;
					this.SendPropertyChanged("rankWhere");
					this.OnrankWhereChanged();
				}
			}
		}
		
		[Association(Name="Employee_EmployeeRank", Storage="_Employee", ThisKey="idEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeRanks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeRanks.Add(this);
						this._idEmployee = value.id;
					}
					else
					{
						this._idEmployee = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="Rank_EmployeeRank", Storage="_Rank", ThisKey="idRank", IsForeignKey=true)]
		public Rank Rank
		{
			get
			{
				return this._Rank.Entity;
			}
			set
			{
				Rank previousValue = this._Rank.Entity;
				if (((previousValue != value) 
							|| (this._Rank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank.Entity = null;
						previousValue.EmployeeRanks.Remove(this);
					}
					this._Rank.Entity = value;
					if ((value != null))
					{
						value.EmployeeRanks.Add(this);
						this._idRank = value.id;
					}
					else
					{
						this._idRank = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FactStaff")]
	public partial class FactStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idPlanStaff;
		
		private int _idEmployee;
		
		private int _idTypeWork;
		
		private int _idBeginPrikaz;
		
		private System.Nullable<int> _idEndPrikaz;
		
		private decimal _StaffCount;
		
		private System.Nullable<System.DateTime> _DateBegin;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private EntitySet<Bonus> _Bonus;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<WorkType> _WorkType;
		
		private EntityRef<Prikaz> _Prikaz;
		
		private EntityRef<Prikaz> _Prikaz1;
		
		private EntityRef<PlanStaff> _PlanStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidPlanStaffChanging(int value);
    partial void OnidPlanStaffChanged();
    partial void OnidEmployeeChanging(int value);
    partial void OnidEmployeeChanged();
    partial void OnidTypeWorkChanging(int value);
    partial void OnidTypeWorkChanged();
    partial void OnidBeginPrikazChanging(int value);
    partial void OnidBeginPrikazChanged();
    partial void OnidEndPrikazChanging(System.Nullable<int> value);
    partial void OnidEndPrikazChanged();
    partial void OnStaffCountChanging(decimal value);
    partial void OnStaffCountChanged();
    partial void OnDateBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBeginChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    #endregion
		
		public FactStaff()
		{
			this._Bonus = new EntitySet<Bonus>(new Action<Bonus>(this.attach_Bonus), new Action<Bonus>(this.detach_Bonus));
			this._Employee = default(EntityRef<Employee>);
			this._WorkType = default(EntityRef<WorkType>);
			this._Prikaz = default(EntityRef<Prikaz>);
			this._Prikaz1 = default(EntityRef<Prikaz>);
			this._PlanStaff = default(EntityRef<PlanStaff>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idPlanStaff", DbType="Int NOT NULL")]
		public int idPlanStaff
		{
			get
			{
				return this._idPlanStaff;
			}
			set
			{
				if ((this._idPlanStaff != value))
				{
					if (this._PlanStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPlanStaffChanging(value);
					this.SendPropertyChanging();
					this._idPlanStaff = value;
					this.SendPropertyChanged("idPlanStaff");
					this.OnidPlanStaffChanged();
				}
			}
		}
		
		[Column(Storage="_idEmployee", DbType="Int NOT NULL")]
		public int idEmployee
		{
			get
			{
				return this._idEmployee;
			}
			set
			{
				if ((this._idEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEmployeeChanging(value);
					this.SendPropertyChanging();
					this._idEmployee = value;
					this.SendPropertyChanged("idEmployee");
					this.OnidEmployeeChanged();
				}
			}
		}
		
		[Column(Storage="_idTypeWork", DbType="Int NOT NULL")]
		public int idTypeWork
		{
			get
			{
				return this._idTypeWork;
			}
			set
			{
				if ((this._idTypeWork != value))
				{
					if (this._WorkType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTypeWorkChanging(value);
					this.SendPropertyChanging();
					this._idTypeWork = value;
					this.SendPropertyChanged("idTypeWork");
					this.OnidTypeWorkChanged();
				}
			}
		}
		
		[Column(Storage="_idBeginPrikaz", DbType="Int NOT NULL")]
		public int idBeginPrikaz
		{
			get
			{
				return this._idBeginPrikaz;
			}
			set
			{
				if ((this._idBeginPrikaz != value))
				{
					if (this._Prikaz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBeginPrikazChanging(value);
					this.SendPropertyChanging();
					this._idBeginPrikaz = value;
					this.SendPropertyChanged("idBeginPrikaz");
					this.OnidBeginPrikazChanged();
				}
			}
		}
		
		[Column(Storage="_idEndPrikaz", DbType="Int")]
		public System.Nullable<int> idEndPrikaz
		{
			get
			{
				return this._idEndPrikaz;
			}
			set
			{
				if ((this._idEndPrikaz != value))
				{
					if (this._Prikaz1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEndPrikazChanging(value);
					this.SendPropertyChanging();
					this._idEndPrikaz = value;
					this.SendPropertyChanged("idEndPrikaz");
					this.OnidEndPrikazChanged();
				}
			}
		}
		
		[Column(Storage="_StaffCount", DbType="Decimal(3,2) NOT NULL")]
		public decimal StaffCount
		{
			get
			{
				return this._StaffCount;
			}
			set
			{
				if ((this._StaffCount != value))
				{
					this.OnStaffCountChanging(value);
					this.SendPropertyChanging();
					this._StaffCount = value;
					this.SendPropertyChanged("StaffCount");
					this.OnStaffCountChanged();
				}
			}
		}
		
		[Column(Storage="_DateBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[Column(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[Association(Name="FactStaff_Bonus", Storage="_Bonus", OtherKey="idFactStaff")]
		public EntitySet<Bonus> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				this._Bonus.Assign(value);
			}
		}
		
		[Association(Name="Employee_FactStaff", Storage="_Employee", ThisKey="idEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FactStaffs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FactStaffs.Add(this);
						this._idEmployee = value.id;
					}
					else
					{
						this._idEmployee = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[Association(Name="WorkType_FactStaff", Storage="_WorkType", ThisKey="idTypeWork", IsForeignKey=true)]
		public WorkType WorkType
		{
			get
			{
				return this._WorkType.Entity;
			}
			set
			{
				WorkType previousValue = this._WorkType.Entity;
				if (((previousValue != value) 
							|| (this._WorkType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkType.Entity = null;
						previousValue.FactStaffs.Remove(this);
					}
					this._WorkType.Entity = value;
					if ((value != null))
					{
						value.FactStaffs.Add(this);
						this._idTypeWork = value.id;
					}
					else
					{
						this._idTypeWork = default(int);
					}
					this.SendPropertyChanged("WorkType");
				}
			}
		}
		
		[Association(Name="Prikaz_FactStaff", Storage="_Prikaz", ThisKey="idBeginPrikaz", IsForeignKey=true)]
		public Prikaz Prikaz
		{
			get
			{
				return this._Prikaz.Entity;
			}
			set
			{
				Prikaz previousValue = this._Prikaz.Entity;
				if (((previousValue != value) 
							|| (this._Prikaz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prikaz.Entity = null;
						previousValue.FactStaffs.Remove(this);
					}
					this._Prikaz.Entity = value;
					if ((value != null))
					{
						value.FactStaffs.Add(this);
						this._idBeginPrikaz = value.id;
					}
					else
					{
						this._idBeginPrikaz = default(int);
					}
					this.SendPropertyChanged("Prikaz");
				}
			}
		}
		
		[Association(Name="Prikaz_FactStaff1", Storage="_Prikaz1", ThisKey="idEndPrikaz", IsForeignKey=true)]
		public Prikaz Prikaz1
		{
			get
			{
				return this._Prikaz1.Entity;
			}
			set
			{
				Prikaz previousValue = this._Prikaz1.Entity;
				if (((previousValue != value) 
							|| (this._Prikaz1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prikaz1.Entity = null;
						previousValue.FactStaffs1.Remove(this);
					}
					this._Prikaz1.Entity = value;
					if ((value != null))
					{
						value.FactStaffs1.Add(this);
						this._idEndPrikaz = value.id;
					}
					else
					{
						this._idEndPrikaz = default(Nullable<int>);
					}
					this.SendPropertyChanged("Prikaz1");
				}
			}
		}
		
		[Association(Name="PlanStaff_FactStaff", Storage="_PlanStaff", ThisKey="idPlanStaff", IsForeignKey=true)]
		public PlanStaff PlanStaff
		{
			get
			{
				return this._PlanStaff.Entity;
			}
			set
			{
				PlanStaff previousValue = this._PlanStaff.Entity;
				if (((previousValue != value) 
							|| (this._PlanStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlanStaff.Entity = null;
						previousValue.FactStaffs.Remove(this);
					}
					this._PlanStaff.Entity = value;
					if ((value != null))
					{
						value.FactStaffs.Add(this);
						this._idPlanStaff = value.id;
					}
					else
					{
						this._idPlanStaff = default(int);
					}
					this.SendPropertyChanged("PlanStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.FactStaff = this;
		}
		
		private void detach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.FactStaff = null;
		}
	}
	
	[Table(Name="dbo.GlobalPrikaz")]
	public partial class GlobalPrikaz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _PrikazName;
		
		private System.Nullable<System.DateTime> _DateBegin;
		
		private EntitySet<Post> _Posts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPrikazNameChanging(string value);
    partial void OnPrikazNameChanged();
    partial void OnDateBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBeginChanged();
    #endregion
		
		public GlobalPrikaz()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_PrikazName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PrikazName
		{
			get
			{
				return this._PrikazName;
			}
			set
			{
				if ((this._PrikazName != value))
				{
					this.OnPrikazNameChanging(value);
					this.SendPropertyChanging();
					this._PrikazName = value;
					this.SendPropertyChanged("PrikazName");
					this.OnPrikazNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[Association(Name="GlobalPrikaz_Post", Storage="_Posts", OtherKey="idGlobalPrikaz")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.GlobalPrikaz = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.GlobalPrikaz = null;
		}
	}
	
	[Table(Name="dbo.Grazd")]
	public partial class Grazd : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _grazdName;
		
		private System.Nullable<int> _KadrID;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OngrazdNameChanging(string value);
    partial void OngrazdNameChanged();
    partial void OnKadrIDChanging(System.Nullable<int> value);
    partial void OnKadrIDChanged();
    #endregion
		
		public Grazd()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_grazdName", DbType="VarChar(100)")]
		public string grazdName
		{
			get
			{
				return this._grazdName;
			}
			set
			{
				if ((this._grazdName != value))
				{
					this.OngrazdNameChanging(value);
					this.SendPropertyChanging();
					this._grazdName = value;
					this.SendPropertyChanged("grazdName");
					this.OngrazdNameChanged();
				}
			}
		}
		
		[Column(Storage="_KadrID", DbType="Int")]
		public System.Nullable<int> KadrID
		{
			get
			{
				return this._KadrID;
			}
			set
			{
				if ((this._KadrID != value))
				{
					this.OnKadrIDChanging(value);
					this.SendPropertyChanging();
					this._KadrID = value;
					this.SendPropertyChanged("KadrID");
					this.OnKadrIDChanged();
				}
			}
		}
		
		[Association(Name="Grazd_Employee", Storage="_Employees", OtherKey="idGrazd")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Grazd = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Grazd = null;
		}
	}
	
	[Table(Name="dbo.PKGroup")]
	public partial class PKGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _GroupNumber;
		
		private string _GroupName;
		
		private EntitySet<PKCategory> _PKCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnGroupNumberChanging(int value);
    partial void OnGroupNumberChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public PKGroup()
		{
			this._PKCategories = new EntitySet<PKCategory>(new Action<PKCategory>(this.attach_PKCategories), new Action<PKCategory>(this.detach_PKCategories));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_GroupNumber", DbType="Int NOT NULL")]
		public int GroupNumber
		{
			get
			{
				return this._GroupNumber;
			}
			set
			{
				if ((this._GroupNumber != value))
				{
					this.OnGroupNumberChanging(value);
					this.SendPropertyChanging();
					this._GroupNumber = value;
					this.SendPropertyChanged("GroupNumber");
					this.OnGroupNumberChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="VarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Association(Name="PKGroup_PKCategory", Storage="_PKCategories", OtherKey="idPKGroup")]
		public EntitySet<PKCategory> PKCategories
		{
			get
			{
				return this._PKCategories;
			}
			set
			{
				this._PKCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PKCategories(PKCategory entity)
		{
			this.SendPropertyChanging();
			entity.PKGroup = this;
		}
		
		private void detach_PKCategories(PKCategory entity)
		{
			this.SendPropertyChanging();
			entity.PKGroup = null;
		}
	}
	
	[Table(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _PostName;
		
		private bool _ManagerBit;
		
		private int _idGlobalPrikaz;
		
		private int _idPKCategory;
		
		private EntitySet<PlanStaff> _PlanStaffs;
		
		private EntityRef<GlobalPrikaz> _GlobalPrikaz;
		
		private EntityRef<PKCategory> _PKCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPostNameChanging(string value);
    partial void OnPostNameChanged();
    partial void OnManagerBitChanging(bool value);
    partial void OnManagerBitChanged();
    partial void OnidGlobalPrikazChanging(int value);
    partial void OnidGlobalPrikazChanged();
    partial void OnidPKCategoryChanging(int value);
    partial void OnidPKCategoryChanged();
    #endregion
		
		public Post()
		{
			this._PlanStaffs = new EntitySet<PlanStaff>(new Action<PlanStaff>(this.attach_PlanStaffs), new Action<PlanStaff>(this.detach_PlanStaffs));
			this._GlobalPrikaz = default(EntityRef<GlobalPrikaz>);
			this._PKCategory = default(EntityRef<PKCategory>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_PostName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PostName
		{
			get
			{
				return this._PostName;
			}
			set
			{
				if ((this._PostName != value))
				{
					this.OnPostNameChanging(value);
					this.SendPropertyChanging();
					this._PostName = value;
					this.SendPropertyChanged("PostName");
					this.OnPostNameChanged();
				}
			}
		}
		
		[Column(Storage="_ManagerBit", DbType="Bit NOT NULL")]
		public bool ManagerBit
		{
			get
			{
				return this._ManagerBit;
			}
			set
			{
				if ((this._ManagerBit != value))
				{
					this.OnManagerBitChanging(value);
					this.SendPropertyChanging();
					this._ManagerBit = value;
					this.SendPropertyChanged("ManagerBit");
					this.OnManagerBitChanged();
				}
			}
		}
		
		[Column(Storage="_idGlobalPrikaz", DbType="Int NOT NULL")]
		public int idGlobalPrikaz
		{
			get
			{
				return this._idGlobalPrikaz;
			}
			set
			{
				if ((this._idGlobalPrikaz != value))
				{
					if (this._GlobalPrikaz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidGlobalPrikazChanging(value);
					this.SendPropertyChanging();
					this._idGlobalPrikaz = value;
					this.SendPropertyChanged("idGlobalPrikaz");
					this.OnidGlobalPrikazChanged();
				}
			}
		}
		
		[Column(Storage="_idPKCategory", DbType="Int NOT NULL")]
		public int idPKCategory
		{
			get
			{
				return this._idPKCategory;
			}
			set
			{
				if ((this._idPKCategory != value))
				{
					if (this._PKCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPKCategoryChanging(value);
					this.SendPropertyChanging();
					this._idPKCategory = value;
					this.SendPropertyChanged("idPKCategory");
					this.OnidPKCategoryChanged();
				}
			}
		}
		
		[Association(Name="Post_PlanStaff", Storage="_PlanStaffs", OtherKey="idPost")]
		public EntitySet<PlanStaff> PlanStaffs
		{
			get
			{
				return this._PlanStaffs;
			}
			set
			{
				this._PlanStaffs.Assign(value);
			}
		}
		
		[Association(Name="GlobalPrikaz_Post", Storage="_GlobalPrikaz", ThisKey="idGlobalPrikaz", IsForeignKey=true)]
		public GlobalPrikaz GlobalPrikaz
		{
			get
			{
				return this._GlobalPrikaz.Entity;
			}
			set
			{
				GlobalPrikaz previousValue = this._GlobalPrikaz.Entity;
				if (((previousValue != value) 
							|| (this._GlobalPrikaz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GlobalPrikaz.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._GlobalPrikaz.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._idGlobalPrikaz = value.id;
					}
					else
					{
						this._idGlobalPrikaz = default(int);
					}
					this.SendPropertyChanged("GlobalPrikaz");
				}
			}
		}
		
		[Association(Name="PKCategory_Post", Storage="_PKCategory", ThisKey="idPKCategory", IsForeignKey=true)]
		public PKCategory PKCategory
		{
			get
			{
				return this._PKCategory.Entity;
			}
			set
			{
				PKCategory previousValue = this._PKCategory.Entity;
				if (((previousValue != value) 
							|| (this._PKCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PKCategory.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._PKCategory.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._idPKCategory = value.id;
					}
					else
					{
						this._idPKCategory = default(int);
					}
					this.SendPropertyChanged("PKCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
	}
	
	[Table(Name="dbo.Rank")]
	public partial class Rank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _RankName;
		
		private System.Nullable<int> _KadrID;
		
		private EntitySet<EmployeeRank> _EmployeeRanks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnRankNameChanging(string value);
    partial void OnRankNameChanged();
    partial void OnKadrIDChanging(System.Nullable<int> value);
    partial void OnKadrIDChanged();
    #endregion
		
		public Rank()
		{
			this._EmployeeRanks = new EntitySet<EmployeeRank>(new Action<EmployeeRank>(this.attach_EmployeeRanks), new Action<EmployeeRank>(this.detach_EmployeeRanks));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_RankName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RankName
		{
			get
			{
				return this._RankName;
			}
			set
			{
				if ((this._RankName != value))
				{
					this.OnRankNameChanging(value);
					this.SendPropertyChanging();
					this._RankName = value;
					this.SendPropertyChanged("RankName");
					this.OnRankNameChanged();
				}
			}
		}
		
		[Column(Storage="_KadrID", DbType="Int")]
		public System.Nullable<int> KadrID
		{
			get
			{
				return this._KadrID;
			}
			set
			{
				if ((this._KadrID != value))
				{
					this.OnKadrIDChanging(value);
					this.SendPropertyChanging();
					this._KadrID = value;
					this.SendPropertyChanged("KadrID");
					this.OnKadrIDChanged();
				}
			}
		}
		
		[Association(Name="Rank_EmployeeRank", Storage="_EmployeeRanks", OtherKey="idRank")]
		public EntitySet<EmployeeRank> EmployeeRanks
		{
			get
			{
				return this._EmployeeRanks;
			}
			set
			{
				this._EmployeeRanks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeRanks(EmployeeRank entity)
		{
			this.SendPropertyChanging();
			entity.Rank = this;
		}
		
		private void detach_EmployeeRanks(EmployeeRank entity)
		{
			this.SendPropertyChanging();
			entity.Rank = null;
		}
	}
	
	[Table(Name="dbo.SemPol")]
	public partial class SemPol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _sempolName;
		
		private System.Nullable<int> _KadrID;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnsempolNameChanging(string value);
    partial void OnsempolNameChanged();
    partial void OnKadrIDChanging(System.Nullable<int> value);
    partial void OnKadrIDChanged();
    #endregion
		
		public SemPol()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_sempolName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string sempolName
		{
			get
			{
				return this._sempolName;
			}
			set
			{
				if ((this._sempolName != value))
				{
					this.OnsempolNameChanging(value);
					this.SendPropertyChanging();
					this._sempolName = value;
					this.SendPropertyChanged("sempolName");
					this.OnsempolNameChanged();
				}
			}
		}
		
		[Column(Storage="_KadrID", DbType="Int")]
		public System.Nullable<int> KadrID
		{
			get
			{
				return this._KadrID;
			}
			set
			{
				if ((this._KadrID != value))
				{
					this.OnKadrIDChanging(value);
					this.SendPropertyChanging();
					this._KadrID = value;
					this.SendPropertyChanged("KadrID");
					this.OnKadrIDChanged();
				}
			}
		}
		
		[Association(Name="SemPol_Employee", Storage="_Employees", OtherKey="idSemPol")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SemPol = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.SemPol = null;
		}
	}
	
	[Table(Name="dbo.Bonus")]
	public partial class Bonus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _BonusCount;
		
		private System.Nullable<System.DateTime> _DateBegin;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private int _idBonusType;
		
		private int _idFactStaff;
		
		private System.Nullable<int> _idPrikaz;
		
		private EntityRef<FactStaff> _FactStaff;
		
		private EntityRef<Prikaz> _Prikaz;
		
		private EntityRef<BonusType> _BonusType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnBonusCountChanging(decimal value);
    partial void OnBonusCountChanged();
    partial void OnDateBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBeginChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnidBonusTypeChanging(int value);
    partial void OnidBonusTypeChanged();
    partial void OnidFactStaffChanging(int value);
    partial void OnidFactStaffChanged();
    partial void OnidPrikazChanging(System.Nullable<int> value);
    partial void OnidPrikazChanged();
    #endregion
		
		public Bonus()
		{
			this._FactStaff = default(EntityRef<FactStaff>);
			this._Prikaz = default(EntityRef<Prikaz>);
			this._BonusType = default(EntityRef<BonusType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_BonusCount", DbType="Decimal(8,2) NOT NULL")]
		public decimal BonusCount
		{
			get
			{
				return this._BonusCount;
			}
			set
			{
				if ((this._BonusCount != value))
				{
					this.OnBonusCountChanging(value);
					this.SendPropertyChanging();
					this._BonusCount = value;
					this.SendPropertyChanged("BonusCount");
					this.OnBonusCountChanged();
				}
			}
		}
		
		[Column(Storage="_DateBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[Column(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[Column(Storage="_idBonusType", DbType="Int NOT NULL")]
		public int idBonusType
		{
			get
			{
				return this._idBonusType;
			}
			set
			{
				if ((this._idBonusType != value))
				{
					if (this._BonusType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBonusTypeChanging(value);
					this.SendPropertyChanging();
					this._idBonusType = value;
					this.SendPropertyChanged("idBonusType");
					this.OnidBonusTypeChanged();
				}
			}
		}
		
		[Column(Storage="_idFactStaff", DbType="Int NOT NULL")]
		public int idFactStaff
		{
			get
			{
				return this._idFactStaff;
			}
			set
			{
				if ((this._idFactStaff != value))
				{
					if (this._FactStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFactStaffChanging(value);
					this.SendPropertyChanging();
					this._idFactStaff = value;
					this.SendPropertyChanged("idFactStaff");
					this.OnidFactStaffChanged();
				}
			}
		}
		
		[Column(Storage="_idPrikaz", DbType="Int")]
		public System.Nullable<int> idPrikaz
		{
			get
			{
				return this._idPrikaz;
			}
			set
			{
				if ((this._idPrikaz != value))
				{
					if (this._Prikaz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPrikazChanging(value);
					this.SendPropertyChanging();
					this._idPrikaz = value;
					this.SendPropertyChanged("idPrikaz");
					this.OnidPrikazChanged();
				}
			}
		}
		
		[Association(Name="FactStaff_Bonus", Storage="_FactStaff", ThisKey="idFactStaff", IsForeignKey=true)]
		public FactStaff FactStaff
		{
			get
			{
				return this._FactStaff.Entity;
			}
			set
			{
				FactStaff previousValue = this._FactStaff.Entity;
				if (((previousValue != value) 
							|| (this._FactStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FactStaff.Entity = null;
						previousValue.Bonus.Remove(this);
					}
					this._FactStaff.Entity = value;
					if ((value != null))
					{
						value.Bonus.Add(this);
						this._idFactStaff = value.id;
					}
					else
					{
						this._idFactStaff = default(int);
					}
					this.SendPropertyChanged("FactStaff");
				}
			}
		}
		
		[Association(Name="Prikaz_Bonus", Storage="_Prikaz", ThisKey="idPrikaz", IsForeignKey=true)]
		public Prikaz Prikaz
		{
			get
			{
				return this._Prikaz.Entity;
			}
			set
			{
				Prikaz previousValue = this._Prikaz.Entity;
				if (((previousValue != value) 
							|| (this._Prikaz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prikaz.Entity = null;
						previousValue.Bonus.Remove(this);
					}
					this._Prikaz.Entity = value;
					if ((value != null))
					{
						value.Bonus.Add(this);
						this._idPrikaz = value.id;
					}
					else
					{
						this._idPrikaz = default(Nullable<int>);
					}
					this.SendPropertyChanged("Prikaz");
				}
			}
		}
		
		[Association(Name="BonusType_Bonus", Storage="_BonusType", ThisKey="idBonusType", IsForeignKey=true)]
		public BonusType BonusType
		{
			get
			{
				return this._BonusType.Entity;
			}
			set
			{
				BonusType previousValue = this._BonusType.Entity;
				if (((previousValue != value) 
							|| (this._BonusType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BonusType.Entity = null;
						previousValue.Bonus.Remove(this);
					}
					this._BonusType.Entity = value;
					if ((value != null))
					{
						value.Bonus.Add(this);
						this._idBonusType = value.id;
					}
					else
					{
						this._idBonusType = default(int);
					}
					this.SendPropertyChanged("BonusType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PKCategory")]
	public partial class PKCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idPKGroup;
		
		private int _PKCategoryNumber;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<PKCategorySalary> _PKCategorySalaries;
		
		private EntityRef<PKGroup> _PKGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidPKGroupChanging(int value);
    partial void OnidPKGroupChanged();
    partial void OnPKCategoryNumberChanging(int value);
    partial void OnPKCategoryNumberChanged();
    #endregion
		
		public PKCategory()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._PKCategorySalaries = new EntitySet<PKCategorySalary>(new Action<PKCategorySalary>(this.attach_PKCategorySalaries), new Action<PKCategorySalary>(this.detach_PKCategorySalaries));
			this._PKGroup = default(EntityRef<PKGroup>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idPKGroup", DbType="Int NOT NULL")]
		public int idPKGroup
		{
			get
			{
				return this._idPKGroup;
			}
			set
			{
				if ((this._idPKGroup != value))
				{
					if (this._PKGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPKGroupChanging(value);
					this.SendPropertyChanging();
					this._idPKGroup = value;
					this.SendPropertyChanged("idPKGroup");
					this.OnidPKGroupChanged();
				}
			}
		}
		
		[Column(Storage="_PKCategoryNumber")]
		public int PKCategoryNumber
		{
			get
			{
				return this._PKCategoryNumber;
			}
			set
			{
				if ((this._PKCategoryNumber != value))
				{
					this.OnPKCategoryNumberChanging(value);
					this.SendPropertyChanging();
					this._PKCategoryNumber = value;
					this.SendPropertyChanged("PKCategoryNumber");
					this.OnPKCategoryNumberChanged();
				}
			}
		}
		
		[Association(Name="PKCategory_Post", Storage="_Posts", OtherKey="idPKCategory")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="PKCategory_PKCategorySalary", Storage="_PKCategorySalaries", OtherKey="idPKCategory")]
		public EntitySet<PKCategorySalary> PKCategorySalaries
		{
			get
			{
				return this._PKCategorySalaries;
			}
			set
			{
				this._PKCategorySalaries.Assign(value);
			}
		}
		
		[Association(Name="PKGroup_PKCategory", Storage="_PKGroup", ThisKey="idPKGroup", IsForeignKey=true)]
		public PKGroup PKGroup
		{
			get
			{
				return this._PKGroup.Entity;
			}
			set
			{
				PKGroup previousValue = this._PKGroup.Entity;
				if (((previousValue != value) 
							|| (this._PKGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PKGroup.Entity = null;
						previousValue.PKCategories.Remove(this);
					}
					this._PKGroup.Entity = value;
					if ((value != null))
					{
						value.PKCategories.Add(this);
						this._idPKGroup = value.id;
					}
					else
					{
						this._idPKGroup = default(int);
					}
					this.SendPropertyChanged("PKGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.PKCategory = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.PKCategory = null;
		}
		
		private void attach_PKCategorySalaries(PKCategorySalary entity)
		{
			this.SendPropertyChanging();
			entity.PKCategory = this;
		}
		
		private void detach_PKCategorySalaries(PKCategorySalary entity)
		{
			this.SendPropertyChanging();
			entity.PKCategory = null;
		}
	}
	
	[Table(Name="dbo.PrikazType")]
	public partial class PrikazType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _PrikazTypeName;
		
		private int _idPrikazSuperType;
		
		private EntitySet<Prikaz> _Prikazs;
		
		private EntityRef<PrikazSuperType> _PrikazSuperType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPrikazTypeNameChanging(string value);
    partial void OnPrikazTypeNameChanged();
    partial void OnidPrikazSuperTypeChanging(int value);
    partial void OnidPrikazSuperTypeChanged();
    #endregion
		
		public PrikazType()
		{
			this._Prikazs = new EntitySet<Prikaz>(new Action<Prikaz>(this.attach_Prikazs), new Action<Prikaz>(this.detach_Prikazs));
			this._PrikazSuperType = default(EntityRef<PrikazSuperType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_PrikazTypeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PrikazTypeName
		{
			get
			{
				return this._PrikazTypeName;
			}
			set
			{
				if ((this._PrikazTypeName != value))
				{
					this.OnPrikazTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PrikazTypeName = value;
					this.SendPropertyChanged("PrikazTypeName");
					this.OnPrikazTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_idPrikazSuperType", DbType="Int NOT NULL")]
		public int idPrikazSuperType
		{
			get
			{
				return this._idPrikazSuperType;
			}
			set
			{
				if ((this._idPrikazSuperType != value))
				{
					if (this._PrikazSuperType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPrikazSuperTypeChanging(value);
					this.SendPropertyChanging();
					this._idPrikazSuperType = value;
					this.SendPropertyChanged("idPrikazSuperType");
					this.OnidPrikazSuperTypeChanged();
				}
			}
		}
		
		[Association(Name="PrikazType_Prikaz", Storage="_Prikazs", OtherKey="idPrikazType")]
		public EntitySet<Prikaz> Prikazs
		{
			get
			{
				return this._Prikazs;
			}
			set
			{
				this._Prikazs.Assign(value);
			}
		}
		
		[Association(Name="PrikazSuperType_PrikazType", Storage="_PrikazSuperType", ThisKey="idPrikazSuperType", IsForeignKey=true)]
		public PrikazSuperType PrikazSuperType
		{
			get
			{
				return this._PrikazSuperType.Entity;
			}
			set
			{
				PrikazSuperType previousValue = this._PrikazSuperType.Entity;
				if (((previousValue != value) 
							|| (this._PrikazSuperType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrikazSuperType.Entity = null;
						previousValue.PrikazTypes.Remove(this);
					}
					this._PrikazSuperType.Entity = value;
					if ((value != null))
					{
						value.PrikazTypes.Add(this);
						this._idPrikazSuperType = value.id;
					}
					else
					{
						this._idPrikazSuperType = default(int);
					}
					this.SendPropertyChanged("PrikazSuperType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prikazs(Prikaz entity)
		{
			this.SendPropertyChanging();
			entity.PrikazType = this;
		}
		
		private void detach_Prikazs(Prikaz entity)
		{
			this.SendPropertyChanging();
			entity.PrikazType = null;
		}
	}
	
	[Table(Name="dbo.Prikaz")]
	public partial class Prikaz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _PrikazName;
		
		private System.Nullable<System.DateTime> _DateBegin;
		
		private System.Nullable<System.DateTime> _DatePrikaz;
		
		private System.Nullable<int> _idPrikazType;
		
		private EntitySet<FactStaff> _FactStaffs;
		
		private EntitySet<FactStaff> _FactStaffs1;
		
		private EntitySet<Bonus> _Bonus;
		
		private EntitySet<PlanStaff> _PlanStaffs;
		
		private EntitySet<PlanStaff> _PlanStaffs1;
		
		private EntityRef<PrikazType> _PrikazType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPrikazNameChanging(string value);
    partial void OnPrikazNameChanged();
    partial void OnDateBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBeginChanged();
    partial void OnDatePrikazChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePrikazChanged();
    partial void OnidPrikazTypeChanging(System.Nullable<int> value);
    partial void OnidPrikazTypeChanged();
    #endregion
		
		public Prikaz()
		{
			this._FactStaffs = new EntitySet<FactStaff>(new Action<FactStaff>(this.attach_FactStaffs), new Action<FactStaff>(this.detach_FactStaffs));
			this._FactStaffs1 = new EntitySet<FactStaff>(new Action<FactStaff>(this.attach_FactStaffs1), new Action<FactStaff>(this.detach_FactStaffs1));
			this._Bonus = new EntitySet<Bonus>(new Action<Bonus>(this.attach_Bonus), new Action<Bonus>(this.detach_Bonus));
			this._PlanStaffs = new EntitySet<PlanStaff>(new Action<PlanStaff>(this.attach_PlanStaffs), new Action<PlanStaff>(this.detach_PlanStaffs));
			this._PlanStaffs1 = new EntitySet<PlanStaff>(new Action<PlanStaff>(this.attach_PlanStaffs1), new Action<PlanStaff>(this.detach_PlanStaffs1));
			this._PrikazType = default(EntityRef<PrikazType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_PrikazName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PrikazName
		{
			get
			{
				return this._PrikazName;
			}
			set
			{
				if ((this._PrikazName != value))
				{
					this.OnPrikazNameChanging(value);
					this.SendPropertyChanging();
					this._PrikazName = value;
					this.SendPropertyChanged("PrikazName");
					this.OnPrikazNameChanged();
				}
			}
		}
		
		[Column(Storage="_DateBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[Column(Storage="_DatePrikaz", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePrikaz
		{
			get
			{
				return this._DatePrikaz;
			}
			set
			{
				if ((this._DatePrikaz != value))
				{
					this.OnDatePrikazChanging(value);
					this.SendPropertyChanging();
					this._DatePrikaz = value;
					this.SendPropertyChanged("DatePrikaz");
					this.OnDatePrikazChanged();
				}
			}
		}
		
		[Column(Storage="_idPrikazType", DbType="Int")]
		public System.Nullable<int> idPrikazType
		{
			get
			{
				return this._idPrikazType;
			}
			set
			{
				if ((this._idPrikazType != value))
				{
					if (this._PrikazType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPrikazTypeChanging(value);
					this.SendPropertyChanging();
					this._idPrikazType = value;
					this.SendPropertyChanged("idPrikazType");
					this.OnidPrikazTypeChanged();
				}
			}
		}
		
		[Association(Name="Prikaz_FactStaff", Storage="_FactStaffs", OtherKey="idBeginPrikaz")]
		public EntitySet<FactStaff> FactStaffs
		{
			get
			{
				return this._FactStaffs;
			}
			set
			{
				this._FactStaffs.Assign(value);
			}
		}
		
		[Association(Name="Prikaz_FactStaff1", Storage="_FactStaffs1", OtherKey="idEndPrikaz")]
		public EntitySet<FactStaff> FactStaffs1
		{
			get
			{
				return this._FactStaffs1;
			}
			set
			{
				this._FactStaffs1.Assign(value);
			}
		}
		
		[Association(Name="Prikaz_Bonus", Storage="_Bonus", OtherKey="idPrikaz")]
		public EntitySet<Bonus> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				this._Bonus.Assign(value);
			}
		}
		
		[Association(Name="Prikaz_PlanStaff", Storage="_PlanStaffs", OtherKey="idBeginPrikaz")]
		public EntitySet<PlanStaff> PlanStaffs
		{
			get
			{
				return this._PlanStaffs;
			}
			set
			{
				this._PlanStaffs.Assign(value);
			}
		}
		
		[Association(Name="Prikaz_PlanStaff1", Storage="_PlanStaffs1", OtherKey="idEndPrikaz")]
		public EntitySet<PlanStaff> PlanStaffs1
		{
			get
			{
				return this._PlanStaffs1;
			}
			set
			{
				this._PlanStaffs1.Assign(value);
			}
		}
		
		[Association(Name="PrikazType_Prikaz", Storage="_PrikazType", ThisKey="idPrikazType", IsForeignKey=true)]
		public PrikazType PrikazType
		{
			get
			{
				return this._PrikazType.Entity;
			}
			set
			{
				PrikazType previousValue = this._PrikazType.Entity;
				if (((previousValue != value) 
							|| (this._PrikazType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrikazType.Entity = null;
						previousValue.Prikazs.Remove(this);
					}
					this._PrikazType.Entity = value;
					if ((value != null))
					{
						value.Prikazs.Add(this);
						this._idPrikazType = value.id;
					}
					else
					{
						this._idPrikazType = default(Nullable<int>);
					}
					this.SendPropertyChanged("PrikazType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz = this;
		}
		
		private void detach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz = null;
		}
		
		private void attach_FactStaffs1(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz1 = this;
		}
		
		private void detach_FactStaffs1(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz1 = null;
		}
		
		private void attach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz = this;
		}
		
		private void detach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz = null;
		}
		
		private void attach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz = this;
		}
		
		private void detach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz = null;
		}
		
		private void attach_PlanStaffs1(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz1 = this;
		}
		
		private void detach_PlanStaffs1(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Prikaz1 = null;
		}
	}
	
	[Table(Name="dbo.PrikazSuperType")]
	public partial class PrikazSuperType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _PrikazSuperTypeName;
		
		private EntitySet<PrikazType> _PrikazTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPrikazSuperTypeNameChanging(string value);
    partial void OnPrikazSuperTypeNameChanged();
    #endregion
		
		public PrikazSuperType()
		{
			this._PrikazTypes = new EntitySet<PrikazType>(new Action<PrikazType>(this.attach_PrikazTypes), new Action<PrikazType>(this.detach_PrikazTypes));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_PrikazSuperTypeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PrikazSuperTypeName
		{
			get
			{
				return this._PrikazSuperTypeName;
			}
			set
			{
				if ((this._PrikazSuperTypeName != value))
				{
					this.OnPrikazSuperTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PrikazSuperTypeName = value;
					this.SendPropertyChanged("PrikazSuperTypeName");
					this.OnPrikazSuperTypeNameChanged();
				}
			}
		}
		
		[Association(Name="PrikazSuperType_PrikazType", Storage="_PrikazTypes", OtherKey="idPrikazSuperType")]
		public EntitySet<PrikazType> PrikazTypes
		{
			get
			{
				return this._PrikazTypes;
			}
			set
			{
				this._PrikazTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrikazTypes(PrikazType entity)
		{
			this.SendPropertyChanging();
			entity.PrikazSuperType = this;
		}
		
		private void detach_PrikazTypes(PrikazType entity)
		{
			this.SendPropertyChanging();
			entity.PrikazSuperType = null;
		}
	}
	
	[Table(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _DepartmentName;
		
		private string _DepartmentSmallName;
		
		private System.Nullable<int> _idDepartmentType;
		
		private System.Nullable<int> _idManagerDepartment;
		
		private System.Nullable<int> _KadrID;
		
		private System.Nullable<System.DateTime> _dateCreate;
		
		private System.Nullable<System.DateTime> _dateExit;
		
		private System.Nullable<int> _idManagerPlanStaff;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<PlanStaff> _PlanStaffs;
		
		private EntityRef<DepartmentType> _DepartmentType;
		
		private EntityRef<Department> _Department1;
		
		private EntityRef<PlanStaff> _PlanStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnDepartmentSmallNameChanging(string value);
    partial void OnDepartmentSmallNameChanged();
    partial void OnidDepartmentTypeChanging(System.Nullable<int> value);
    partial void OnidDepartmentTypeChanged();
    partial void OnidManagerDepartmentChanging(System.Nullable<int> value);
    partial void OnidManagerDepartmentChanged();
    partial void OnKadrIDChanging(System.Nullable<int> value);
    partial void OnKadrIDChanged();
    partial void OndateCreateChanging(System.Nullable<System.DateTime> value);
    partial void OndateCreateChanged();
    partial void OndateExitChanging(System.Nullable<System.DateTime> value);
    partial void OndateExitChanged();
    partial void OnidManagerPlanStaffChanging(System.Nullable<int> value);
    partial void OnidManagerPlanStaffChanged();
    #endregion
		
		public Department()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._PlanStaffs = new EntitySet<PlanStaff>(new Action<PlanStaff>(this.attach_PlanStaffs), new Action<PlanStaff>(this.detach_PlanStaffs));
			this._DepartmentType = default(EntityRef<DepartmentType>);
			this._Department1 = default(EntityRef<Department>);
			this._PlanStaff = default(EntityRef<PlanStaff>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[Column(Storage="_DepartmentSmallName", DbType="VarChar(50)")]
		public string DepartmentSmallName
		{
			get
			{
				return this._DepartmentSmallName;
			}
			set
			{
				if ((this._DepartmentSmallName != value))
				{
					this.OnDepartmentSmallNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentSmallName = value;
					this.SendPropertyChanged("DepartmentSmallName");
					this.OnDepartmentSmallNameChanged();
				}
			}
		}
		
		[Column(Storage="_idDepartmentType", DbType="Int")]
		public System.Nullable<int> idDepartmentType
		{
			get
			{
				return this._idDepartmentType;
			}
			set
			{
				if ((this._idDepartmentType != value))
				{
					if (this._DepartmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDepartmentTypeChanging(value);
					this.SendPropertyChanging();
					this._idDepartmentType = value;
					this.SendPropertyChanged("idDepartmentType");
					this.OnidDepartmentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_idManagerDepartment", DbType="Int")]
		public System.Nullable<int> idManagerDepartment
		{
			get
			{
				return this._idManagerDepartment;
			}
			set
			{
				if ((this._idManagerDepartment != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidManagerDepartmentChanging(value);
					this.SendPropertyChanging();
					this._idManagerDepartment = value;
					this.SendPropertyChanged("idManagerDepartment");
					this.OnidManagerDepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_KadrID", DbType="Int")]
		public System.Nullable<int> KadrID
		{
			get
			{
				return this._KadrID;
			}
			set
			{
				if ((this._KadrID != value))
				{
					this.OnKadrIDChanging(value);
					this.SendPropertyChanging();
					this._KadrID = value;
					this.SendPropertyChanged("KadrID");
					this.OnKadrIDChanged();
				}
			}
		}
		
		[Column(Storage="_dateCreate", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateCreate
		{
			get
			{
				return this._dateCreate;
			}
			set
			{
				if ((this._dateCreate != value))
				{
					this.OndateCreateChanging(value);
					this.SendPropertyChanging();
					this._dateCreate = value;
					this.SendPropertyChanged("dateCreate");
					this.OndateCreateChanged();
				}
			}
		}
		
		[Column(Storage="_dateExit", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateExit
		{
			get
			{
				return this._dateExit;
			}
			set
			{
				if ((this._dateExit != value))
				{
					this.OndateExitChanging(value);
					this.SendPropertyChanging();
					this._dateExit = value;
					this.SendPropertyChanged("dateExit");
					this.OndateExitChanged();
				}
			}
		}
		
		[Column(Storage="_idManagerPlanStaff", DbType="Int")]
		public System.Nullable<int> idManagerPlanStaff
		{
			get
			{
				return this._idManagerPlanStaff;
			}
			set
			{
				if ((this._idManagerPlanStaff != value))
				{
					if (this._PlanStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidManagerPlanStaffChanging(value);
					this.SendPropertyChanging();
					this._idManagerPlanStaff = value;
					this.SendPropertyChanged("idManagerPlanStaff");
					this.OnidManagerPlanStaffChanged();
				}
			}
		}
		
		[Association(Name="Department_Department", Storage="_Departments", OtherKey="idManagerDepartment")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[Association(Name="Department_PlanStaff", Storage="_PlanStaffs", OtherKey="idDepartment")]
		public EntitySet<PlanStaff> PlanStaffs
		{
			get
			{
				return this._PlanStaffs;
			}
			set
			{
				this._PlanStaffs.Assign(value);
			}
		}
		
		[Association(Name="DepartmentType_Department", Storage="_DepartmentType", ThisKey="idDepartmentType", IsForeignKey=true)]
		public DepartmentType DepartmentType
		{
			get
			{
				return this._DepartmentType.Entity;
			}
			set
			{
				DepartmentType previousValue = this._DepartmentType.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentType.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._DepartmentType.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._idDepartmentType = value.id;
					}
					else
					{
						this._idDepartmentType = default(Nullable<int>);
					}
					this.SendPropertyChanged("DepartmentType");
				}
			}
		}
		
		[Association(Name="Department_Department", Storage="_Department1", ThisKey="idManagerDepartment", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._idManagerDepartment = value.id;
					}
					else
					{
						this._idManagerDepartment = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		[Association(Name="PlanStaff_Department", Storage="_PlanStaff", ThisKey="idManagerPlanStaff", IsForeignKey=true)]
		public PlanStaff PlanStaff
		{
			get
			{
				return this._PlanStaff.Entity;
			}
			set
			{
				PlanStaff previousValue = this._PlanStaff.Entity;
				if (((previousValue != value) 
							|| (this._PlanStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlanStaff.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._PlanStaff.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._idManagerPlanStaff = value.id;
					}
					else
					{
						this._idManagerPlanStaff = default(Nullable<int>);
					}
					this.SendPropertyChanged("PlanStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
		
		private void attach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[Table(Name="dbo.BonusType")]
	public partial class BonusType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _BonusTypeName;
		
		private int _idBonusSuperType;
		
		private EntitySet<Bonus> _Bonus;
		
		private EntityRef<BonusSuperType> _BonusSuperType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnBonusTypeNameChanging(string value);
    partial void OnBonusTypeNameChanged();
    partial void OnidBonusSuperTypeChanging(int value);
    partial void OnidBonusSuperTypeChanged();
    #endregion
		
		public BonusType()
		{
			this._Bonus = new EntitySet<Bonus>(new Action<Bonus>(this.attach_Bonus), new Action<Bonus>(this.detach_Bonus));
			this._BonusSuperType = default(EntityRef<BonusSuperType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_BonusTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BonusTypeName
		{
			get
			{
				return this._BonusTypeName;
			}
			set
			{
				if ((this._BonusTypeName != value))
				{
					this.OnBonusTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BonusTypeName = value;
					this.SendPropertyChanged("BonusTypeName");
					this.OnBonusTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_idBonusSuperType", DbType="Int NOT NULL")]
		public int idBonusSuperType
		{
			get
			{
				return this._idBonusSuperType;
			}
			set
			{
				if ((this._idBonusSuperType != value))
				{
					if (this._BonusSuperType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBonusSuperTypeChanging(value);
					this.SendPropertyChanging();
					this._idBonusSuperType = value;
					this.SendPropertyChanged("idBonusSuperType");
					this.OnidBonusSuperTypeChanged();
				}
			}
		}
		
		[Association(Name="BonusType_Bonus", Storage="_Bonus", OtherKey="idBonusType")]
		public EntitySet<Bonus> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				this._Bonus.Assign(value);
			}
		}
		
		[Association(Name="BonusSuperType_BonusType", Storage="_BonusSuperType", ThisKey="idBonusSuperType", IsForeignKey=true)]
		public BonusSuperType BonusSuperType
		{
			get
			{
				return this._BonusSuperType.Entity;
			}
			set
			{
				BonusSuperType previousValue = this._BonusSuperType.Entity;
				if (((previousValue != value) 
							|| (this._BonusSuperType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BonusSuperType.Entity = null;
						previousValue.BonusTypes.Remove(this);
					}
					this._BonusSuperType.Entity = value;
					if ((value != null))
					{
						value.BonusTypes.Add(this);
						this._idBonusSuperType = value.id;
					}
					else
					{
						this._idBonusSuperType = default(int);
					}
					this.SendPropertyChanged("BonusSuperType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.BonusType = this;
		}
		
		private void detach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.BonusType = null;
		}
	}
	
	[Table(Name="dbo.FinancingSource")]
	public partial class FinancingSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _FinancingSourceName;
		
		private EntitySet<PlanStaff> _PlanStaffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnFinancingSourceNameChanging(string value);
    partial void OnFinancingSourceNameChanged();
    #endregion
		
		public FinancingSource()
		{
			this._PlanStaffs = new EntitySet<PlanStaff>(new Action<PlanStaff>(this.attach_PlanStaffs), new Action<PlanStaff>(this.detach_PlanStaffs));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_FinancingSourceName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FinancingSourceName
		{
			get
			{
				return this._FinancingSourceName;
			}
			set
			{
				if ((this._FinancingSourceName != value))
				{
					this.OnFinancingSourceNameChanging(value);
					this.SendPropertyChanging();
					this._FinancingSourceName = value;
					this.SendPropertyChanged("FinancingSourceName");
					this.OnFinancingSourceNameChanged();
				}
			}
		}
		
		[Association(Name="FinancingSource_PlanStaff", Storage="_PlanStaffs", OtherKey="idFinancingSource")]
		public EntitySet<PlanStaff> PlanStaffs
		{
			get
			{
				return this._PlanStaffs;
			}
			set
			{
				this._PlanStaffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.FinancingSource = this;
		}
		
		private void detach_PlanStaffs(PlanStaff entity)
		{
			this.SendPropertyChanging();
			entity.FinancingSource = null;
		}
	}
	
	[Table(Name="dbo.PlanStaff")]
	public partial class PlanStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _StaffCount;
		
		private int _idCategory;
		
		private int _idDepartment;
		
		private int _idPost;
		
		private int _idBeginPrikaz;
		
		private System.Nullable<int> _idEndPrikaz;
		
		private System.Nullable<int> _idFinancingSource;
		
		private EntitySet<FactStaff> _FactStaffs;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<PlanStaffSalary> _PlanStaffSalaries;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<FinancingSource> _FinancingSource;
		
		private EntityRef<Post> _Post;
		
		private EntityRef<Prikaz> _Prikaz;
		
		private EntityRef<Prikaz> _Prikaz1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnStaffCountChanging(decimal value);
    partial void OnStaffCountChanged();
    partial void OnidCategoryChanging(int value);
    partial void OnidCategoryChanged();
    partial void OnidDepartmentChanging(int value);
    partial void OnidDepartmentChanged();
    partial void OnidPostChanging(int value);
    partial void OnidPostChanged();
    partial void OnidBeginPrikazChanging(int value);
    partial void OnidBeginPrikazChanged();
    partial void OnidEndPrikazChanging(System.Nullable<int> value);
    partial void OnidEndPrikazChanged();
    partial void OnidFinancingSourceChanging(System.Nullable<int> value);
    partial void OnidFinancingSourceChanged();
    #endregion
		
		public PlanStaff()
		{
			this._FactStaffs = new EntitySet<FactStaff>(new Action<FactStaff>(this.attach_FactStaffs), new Action<FactStaff>(this.detach_FactStaffs));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._PlanStaffSalaries = new EntitySet<PlanStaffSalary>(new Action<PlanStaffSalary>(this.attach_PlanStaffSalaries), new Action<PlanStaffSalary>(this.detach_PlanStaffSalaries));
			this._Category = default(EntityRef<Category>);
			this._Department = default(EntityRef<Department>);
			this._FinancingSource = default(EntityRef<FinancingSource>);
			this._Post = default(EntityRef<Post>);
			this._Prikaz = default(EntityRef<Prikaz>);
			this._Prikaz1 = default(EntityRef<Prikaz>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_StaffCount", DbType="Decimal(4,2) NOT NULL")]
		public decimal StaffCount
		{
			get
			{
				return this._StaffCount;
			}
			set
			{
				if ((this._StaffCount != value))
				{
					this.OnStaffCountChanging(value);
					this.SendPropertyChanging();
					this._StaffCount = value;
					this.SendPropertyChanged("StaffCount");
					this.OnStaffCountChanged();
				}
			}
		}
		
		[Column(Storage="_idCategory", DbType="Int NOT NULL")]
		public int idCategory
		{
			get
			{
				return this._idCategory;
			}
			set
			{
				if ((this._idCategory != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCategoryChanging(value);
					this.SendPropertyChanging();
					this._idCategory = value;
					this.SendPropertyChanged("idCategory");
					this.OnidCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_idDepartment", DbType="Int NOT NULL")]
		public int idDepartment
		{
			get
			{
				return this._idDepartment;
			}
			set
			{
				if ((this._idDepartment != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDepartmentChanging(value);
					this.SendPropertyChanging();
					this._idDepartment = value;
					this.SendPropertyChanged("idDepartment");
					this.OnidDepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_idPost", DbType="Int NOT NULL")]
		public int idPost
		{
			get
			{
				return this._idPost;
			}
			set
			{
				if ((this._idPost != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPostChanging(value);
					this.SendPropertyChanging();
					this._idPost = value;
					this.SendPropertyChanged("idPost");
					this.OnidPostChanged();
				}
			}
		}
		
		[Column(Storage="_idBeginPrikaz", DbType="Int NOT NULL")]
		public int idBeginPrikaz
		{
			get
			{
				return this._idBeginPrikaz;
			}
			set
			{
				if ((this._idBeginPrikaz != value))
				{
					if (this._Prikaz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBeginPrikazChanging(value);
					this.SendPropertyChanging();
					this._idBeginPrikaz = value;
					this.SendPropertyChanged("idBeginPrikaz");
					this.OnidBeginPrikazChanged();
				}
			}
		}
		
		[Column(Storage="_idEndPrikaz", DbType="Int")]
		public System.Nullable<int> idEndPrikaz
		{
			get
			{
				return this._idEndPrikaz;
			}
			set
			{
				if ((this._idEndPrikaz != value))
				{
					if (this._Prikaz1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEndPrikazChanging(value);
					this.SendPropertyChanging();
					this._idEndPrikaz = value;
					this.SendPropertyChanged("idEndPrikaz");
					this.OnidEndPrikazChanged();
				}
			}
		}
		
		[Column(Storage="_idFinancingSource", DbType="Int")]
		public System.Nullable<int> idFinancingSource
		{
			get
			{
				return this._idFinancingSource;
			}
			set
			{
				if ((this._idFinancingSource != value))
				{
					if (this._FinancingSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidFinancingSourceChanging(value);
					this.SendPropertyChanging();
					this._idFinancingSource = value;
					this.SendPropertyChanged("idFinancingSource");
					this.OnidFinancingSourceChanged();
				}
			}
		}
		
		[Association(Name="PlanStaff_FactStaff", Storage="_FactStaffs", OtherKey="idPlanStaff")]
		public EntitySet<FactStaff> FactStaffs
		{
			get
			{
				return this._FactStaffs;
			}
			set
			{
				this._FactStaffs.Assign(value);
			}
		}
		
		[Association(Name="PlanStaff_Department", Storage="_Departments", OtherKey="idManagerPlanStaff")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[Association(Name="PlanStaff_PlanStaffSalary", Storage="_PlanStaffSalaries", OtherKey="idPlanStaff")]
		public EntitySet<PlanStaffSalary> PlanStaffSalaries
		{
			get
			{
				return this._PlanStaffSalaries;
			}
			set
			{
				this._PlanStaffSalaries.Assign(value);
			}
		}
		
		[Association(Name="Category_PlanStaff", Storage="_Category", ThisKey="idCategory", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.PlanStaffs.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.PlanStaffs.Add(this);
						this._idCategory = value.id;
					}
					else
					{
						this._idCategory = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Department_PlanStaff", Storage="_Department", ThisKey="idDepartment", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.PlanStaffs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.PlanStaffs.Add(this);
						this._idDepartment = value.id;
					}
					else
					{
						this._idDepartment = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[Association(Name="FinancingSource_PlanStaff", Storage="_FinancingSource", ThisKey="idFinancingSource", IsForeignKey=true)]
		public FinancingSource FinancingSource
		{
			get
			{
				return this._FinancingSource.Entity;
			}
			set
			{
				FinancingSource previousValue = this._FinancingSource.Entity;
				if (((previousValue != value) 
							|| (this._FinancingSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FinancingSource.Entity = null;
						previousValue.PlanStaffs.Remove(this);
					}
					this._FinancingSource.Entity = value;
					if ((value != null))
					{
						value.PlanStaffs.Add(this);
						this._idFinancingSource = value.id;
					}
					else
					{
						this._idFinancingSource = default(Nullable<int>);
					}
					this.SendPropertyChanged("FinancingSource");
				}
			}
		}
		
		[Association(Name="Post_PlanStaff", Storage="_Post", ThisKey="idPost", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.PlanStaffs.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.PlanStaffs.Add(this);
						this._idPost = value.id;
					}
					else
					{
						this._idPost = default(int);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		[Association(Name="Prikaz_PlanStaff", Storage="_Prikaz", ThisKey="idBeginPrikaz", IsForeignKey=true)]
		public Prikaz Prikaz
		{
			get
			{
				return this._Prikaz.Entity;
			}
			set
			{
				Prikaz previousValue = this._Prikaz.Entity;
				if (((previousValue != value) 
							|| (this._Prikaz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prikaz.Entity = null;
						previousValue.PlanStaffs.Remove(this);
					}
					this._Prikaz.Entity = value;
					if ((value != null))
					{
						value.PlanStaffs.Add(this);
						this._idBeginPrikaz = value.id;
					}
					else
					{
						this._idBeginPrikaz = default(int);
					}
					this.SendPropertyChanged("Prikaz");
				}
			}
		}
		
		[Association(Name="Prikaz_PlanStaff1", Storage="_Prikaz1", ThisKey="idEndPrikaz", IsForeignKey=true)]
		public Prikaz Prikaz1
		{
			get
			{
				return this._Prikaz1.Entity;
			}
			set
			{
				Prikaz previousValue = this._Prikaz1.Entity;
				if (((previousValue != value) 
							|| (this._Prikaz1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prikaz1.Entity = null;
						previousValue.PlanStaffs1.Remove(this);
					}
					this._Prikaz1.Entity = value;
					if ((value != null))
					{
						value.PlanStaffs1.Add(this);
						this._idEndPrikaz = value.id;
					}
					else
					{
						this._idEndPrikaz = default(Nullable<int>);
					}
					this.SendPropertyChanged("Prikaz1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.PlanStaff = this;
		}
		
		private void detach_FactStaffs(FactStaff entity)
		{
			this.SendPropertyChanging();
			entity.PlanStaff = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.PlanStaff = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.PlanStaff = null;
		}
		
		private void attach_PlanStaffSalaries(PlanStaffSalary entity)
		{
			this.SendPropertyChanging();
			entity.PlanStaff = this;
		}
		
		private void detach_PlanStaffSalaries(PlanStaffSalary entity)
		{
			this.SendPropertyChanging();
			entity.PlanStaff = null;
		}
	}
	
	[Table(Name="dbo.PKCategorySalary")]
	public partial class PKCategorySalary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _SalarySize;
		
		private System.Nullable<System.DateTime> _DateBegin;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private System.Nullable<int> _idPKCategory;
		
		private EntityRef<PKCategory> _PKCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSalarySizeChanging(decimal value);
    partial void OnSalarySizeChanged();
    partial void OnDateBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBeginChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnidPKCategoryChanging(System.Nullable<int> value);
    partial void OnidPKCategoryChanged();
    #endregion
		
		public PKCategorySalary()
		{
			this._PKCategory = default(EntityRef<PKCategory>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_SalarySize", DbType="SmallMoney NOT NULL")]
		public decimal SalarySize
		{
			get
			{
				return this._SalarySize;
			}
			set
			{
				if ((this._SalarySize != value))
				{
					this.OnSalarySizeChanging(value);
					this.SendPropertyChanging();
					this._SalarySize = value;
					this.SendPropertyChanged("SalarySize");
					this.OnSalarySizeChanged();
				}
			}
		}
		
		[Column(Storage="_DateBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[Column(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[Column(Storage="_idPKCategory", DbType="Int")]
		public System.Nullable<int> idPKCategory
		{
			get
			{
				return this._idPKCategory;
			}
			set
			{
				if ((this._idPKCategory != value))
				{
					if (this._PKCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPKCategoryChanging(value);
					this.SendPropertyChanging();
					this._idPKCategory = value;
					this.SendPropertyChanged("idPKCategory");
					this.OnidPKCategoryChanged();
				}
			}
		}
		
		[Association(Name="PKCategory_PKCategorySalary", Storage="_PKCategory", ThisKey="idPKCategory", IsForeignKey=true)]
		public PKCategory PKCategory
		{
			get
			{
				return this._PKCategory.Entity;
			}
			set
			{
				PKCategory previousValue = this._PKCategory.Entity;
				if (((previousValue != value) 
							|| (this._PKCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PKCategory.Entity = null;
						previousValue.PKCategorySalaries.Remove(this);
					}
					this._PKCategory.Entity = value;
					if ((value != null))
					{
						value.PKCategorySalaries.Add(this);
						this._idPKCategory = value.id;
					}
					else
					{
						this._idPKCategory = default(Nullable<int>);
					}
					this.SendPropertyChanged("PKCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PlanStaffSalary")]
	public partial class PlanStaffSalary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _SalarySize;
		
		private System.Nullable<System.DateTime> _DateBegin;
		
		private System.Nullable<System.DateTime> _DateEnd;
		
		private int _idPlanStaff;
		
		private EntityRef<PlanStaff> _PlanStaff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSalarySizeChanging(decimal value);
    partial void OnSalarySizeChanged();
    partial void OnDateBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnDateBeginChanged();
    partial void OnDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEndChanged();
    partial void OnidPlanStaffChanging(int value);
    partial void OnidPlanStaffChanged();
    #endregion
		
		public PlanStaffSalary()
		{
			this._PlanStaff = default(EntityRef<PlanStaff>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_SalarySize", DbType="Money NOT NULL")]
		public decimal SalarySize
		{
			get
			{
				return this._SalarySize;
			}
			set
			{
				if ((this._SalarySize != value))
				{
					this.OnSalarySizeChanging(value);
					this.SendPropertyChanging();
					this._SalarySize = value;
					this.SendPropertyChanged("SalarySize");
					this.OnSalarySizeChanged();
				}
			}
		}
		
		[Column(Storage="_DateBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this.OnDateBeginChanging(value);
					this.SendPropertyChanging();
					this._DateBegin = value;
					this.SendPropertyChanged("DateBegin");
					this.OnDateBeginChanged();
				}
			}
		}
		
		[Column(Storage="_DateEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[Column(Storage="_idPlanStaff", DbType="Int NOT NULL")]
		public int idPlanStaff
		{
			get
			{
				return this._idPlanStaff;
			}
			set
			{
				if ((this._idPlanStaff != value))
				{
					if (this._PlanStaff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPlanStaffChanging(value);
					this.SendPropertyChanging();
					this._idPlanStaff = value;
					this.SendPropertyChanged("idPlanStaff");
					this.OnidPlanStaffChanged();
				}
			}
		}
		
		[Association(Name="PlanStaff_PlanStaffSalary", Storage="_PlanStaff", ThisKey="idPlanStaff", IsForeignKey=true)]
		public PlanStaff PlanStaff
		{
			get
			{
				return this._PlanStaff.Entity;
			}
			set
			{
				PlanStaff previousValue = this._PlanStaff.Entity;
				if (((previousValue != value) 
							|| (this._PlanStaff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlanStaff.Entity = null;
						previousValue.PlanStaffSalaries.Remove(this);
					}
					this._PlanStaff.Entity = value;
					if ((value != null))
					{
						value.PlanStaffSalaries.Add(this);
						this._idPlanStaff = value.id;
					}
					else
					{
						this._idPlanStaff = default(int);
					}
					this.SendPropertyChanged("PlanStaff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
